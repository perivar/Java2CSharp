{
    "J2CS": {
        "Rules": {
            "add": [
                {
                    "name": "Array.Copy",
                    "pattern": "System\\.arraycopy",
                    "replacement": "Array.Copy"
                },
                {
                    "name": "toByteArray",
                    "pattern": "toByteArray",
                    "replacement": "ToArray"
                },
                {
                    "name": "longBitsToDouble",
                    "pattern": "Double\\.longBitsToDouble",
                    "replacement": "BitConverter.Int64BitsToDouble"
                },
                {
                    "name": "ByteArrayInputStream",
                    "pattern": "ByteArrayInputStream|ByteArrayOutputStream",
                    "replacement": "MemoryStream"
                },
                {
                    "name": "Character.isLetter",
                    "pattern": "Character.isLetter",
                    "replacement": "Character\\.isLetter"
                },
                {
                    "name": "GetClass",
                    "pattern": "GetClass\\(\\)\\.GetName\\(\\)",
                    "replacement": "GetType().Name"
                },
                {
                    "name": ".getClass",
                    "pattern": "\\.getClass\\(\\)",
                    "replacement": ".GetType()"
                },
                {
                    "name": "getClass",
                    "pattern": "getClass\\(\\)",
                    "replacement": "GetType()"
                },
                {
                    "name": "System.SetProperty()",
                    "pattern": "System\\.SetProperty",
                    "replacement": "Environment.SetEnvironmentVariable"
                },
                {
                    "name": "System.GetProperty()",
                    "pattern": "System\\.GetProperty",
                    "replacement": "GetEnvironmentVariable"
                },
                {
                    "name": "toUpperCase",
                    "pattern": "toUpperCase",
                    "replacement": "ToUpper"
                },
                {
                    "name": "toLowerCase",
                    "pattern": "toLowerCase",
                    "replacement": "ToLower"
                },
                {
                    "name": "StringBuffer",
                    "pattern": "StringBuffer",
                    "replacement": "StringBuilder"
                },
                {
                    "name": "System.out.println",
                    "pattern": "System\\.out\\.println",
                    "replacement": "Console.WriteLine"
                },
                {
                    "name": "line.separator",
                    "pattern": "System\\.GetProperty\\(\"line.separator\"\\)",
                    "replacement": "Console.WriteLine"
                },
                {
                    "name": "implements or extends",
                    "pattern": "\\simplements\\s|\\sextends\\s",
                    "replacement": " : "
                },
                {
                    "name": "package",
                    "pattern": "package\\s",
                    "replacement": "namespace "
                },
                {
                    "name": "import",
                    "pattern": "import\\s",
                    "replacement": "using "
                },
                {
                    "name": "instanceof",
                    "pattern": "instanceof",
                    "replacement": "is"
                },
                {
                    "name": "boolean",
                    "pattern": "boolean",
                    "replacement": "bool"
                },
                {
                    "name": "MIN_VALUE",
                    "pattern": "MIN_VALUE",
                    "replacement": "MinValue"
                },
                {
                    "name": "MAX_VALUE",
                    "pattern": "MAX_VALUE",
                    "replacement": "MaxValue"
                },
                {
                    "name": "Short",
                    "pattern": "Short",
                    "replacement": "short"
                },
                {
                    "name": "Double.ParseDouble",
                    "pattern": "Double\\.ParseDouble",
                    "replacement": "Double.Parse"
                },
                {
                    "name": "Character.isDigit",
                    "pattern": "Character.isDigit",
                    "replacement": "Char.IsDigit"
                },
                {
                    "name": "length()",
                    "pattern": "\\.length(\\(\\))?",
                    "replacement": ".Length"
                },
                {
                    "name": "Double.isInfinite",
                    "pattern": "Double\\.isInfinite",
                    "replacement": "Double.IsInfinity"
                },
                {
                    "name": "Character.isWhitespace",
                    "pattern": "Character\\.isWhitespace",
                    "replacement": "Char.IsWhiteSpace"
                },
                {
                    "name": "Integer.",
                    "pattern": "Integer\\.",
                    "replacement": "Int32."
                },
                {
                    "name": ".size()",
                    "pattern": "\\.size\\(\\)",
                    "replacement": ".Count"
                },
                {
                    "name": "assertEquals",
                    "pattern": "assertEquals",
                    "replacement": "Assert.AreEqual"
                },
                {
                    "name": "assertTrue",
                    "pattern": "assertTrue",
                    "replacement": "Assert.IsTrue"
                },
                {
                    "name": "assertFalse",
                    "pattern": "assertFalse",
                    "replacement": "Assert.IsFalse"
                },
                {
                    "name": "assertSame",
                    "pattern": "assertSame",
                    "replacement": "Assert.AreSame"
                },
                {
                    "name": "assertNotNull",
                    "pattern": "assertNotNull",
                    "replacement": "Assert.IsNotNull"
                },
                {
                    "name": ".getStart()",
                    "pattern": "\\.getStart\\(\\)",
                    "replacement": ".Start"
                },
                {
                    "name": ".getEnd()",
                    "pattern": "\\.getEnd\\(\\)",
                    "replacement": ".End"
                },
                {
                    "name": ".subList",
                    "pattern": "\\.subList",
                    "replacement": ".GetRange"
                },
                {
                    "name": "super",
                    "pattern": "super\\(",
                    "replacement": "base("
                },
                {
                    "name": "namespace org.apache.poi",
                    "pattern": "namespace org\\.apache\\.poi;",
                    "replacement": "namespace NPOI{"
                },
                {
                    "name": "'is' prefix",
                    "pattern": "bool\\sis",
                    "replacement": "bool Is"
                },
                {
                    "name": "'has' prefix",
                    "pattern": "bool\\shas",
                    "replacement": "bool Has"
                },
                {
                    "name": ".has",
                    "pattern": "\\.has",
                    "replacement": ".Has"
                },
                {
                    "name": ".open",
                    "pattern": "\\.open",
                    "replacement": ".Open"
                },
                {
                    "name": "HashMap",
                    "pattern": "HashMap<",
                    "replacement": "Dictionary<"
                },
                {
                    "name": "Map",
                    "pattern": "Map<",
                    "replacement": "Dictionary<"
                },
                {
                    "name": "IllegalArgumentException",
                    "pattern": "IllegalArgumentException",
                    "replacement": "ArgumentException"
                },
                {
                    "name": "IllegalStateException",
                    "pattern": "IllegalStateException",
                    "replacement": "InvalidOperationException"
                },
                {
                    "name": "NullPointerException",
                    "pattern": "NullPointerException",
                    "replacement": "ArgumentNullException"
                },
                {
                    "name": "Throwable",
                    "pattern": "Throwable",
                    "replacement": "Exception"
                },
                {
                    "name": "GetPackage()",
                    "pattern": "GetPackage\\(\\)",
                    "replacement": "Package"
                },
                {
                    "name": ".commit",
                    "pattern": "\\.commit",
                    "replacement": "\\.Commit"
                },
                {
                    "name": " commit",
                    "pattern": "\\scommit",
                    "replacement": " Commit"
                },
                {
                    "name": "@Override",
                    "pattern": "@Override"
                },
                {
                    "name": "@Internal",
                    "pattern": "@Internal"
                },
                {
                    "name": ".is",
                    "pattern": "\\.is",
                    "replacement": ".Is"
                },
                {
                    "name": ".close",
                    "pattern": "\\.close",
                    "replacement": ".Close"
                },
                {
                    "name": "Integer",
                    "pattern": "Integer",
                    "replacement": "int"
                },
                {
                    "name": " put",
                    "pattern": "\\sput",
                    "replacement": " Put"
                },
                {
                    "name": ".put",
                    "pattern": "\\.put",
                    "replacement": ".Put"
                },
                {
                    "name": "toArray",
                    "pattern": "toArray",
                    "replacement": "ToArray"
                },
                {
                    "name": "ArrayList<",
                    "pattern": "ArrayList<",
                    "replacement": "List<"
                },
                {
                    "name": " get",
                    "pattern": "\\sget",
                    "replacement": " Get"
                },
                {
                    "name": ".get",
                    "pattern": "\\.get",
                    "replacement": ".Get"
                },
                {
                    "name": ".set",
                    "pattern": "\\.set",
                    "replacement": ".Set"
                },
                {
                    "name": " set",
                    "pattern": "\\sset",
                    "replacement": " Set"
                },
                {
                    "name": " draw",
                    "pattern": "\\sdraw",
                    "replacement": " Draw"
                },
                {
                    "name": ".draw",
                    "pattern": "\\.draw",
                    "replacement": ".Draw"
                },
                {
                    "name": " move",
                    "pattern": "\\smove",
                    "replacement": " Move"
                },
                {
                    "name": ".move",
                    "pattern": "\\.move",
                    "replacement": ".Move"
                },
                {
                    "name": " after",
                    "pattern": "\\safter",
                    "replacement": " After"
                },
                {
                    "name": ".after",
                    "pattern": "\\.after",
                    "replacement": ".After"
                },
                {
                    "name": " reset",
                    "pattern": "\\sreset",
                    "replacement": " Reset"
                },
                {
                    "name": ".reset",
                    "pattern": "\\.reset",
                    "replacement": ".Reset"
                },
                {
                    "name": " skip",
                    "pattern": "\\sskip",
                    "replacement": " Skip"
                },
                {
                    "name": ".skip",
                    "pattern": "\\.skip",
                    "replacement": ".Skip"
                },
                {
                    "name": "out.",
                    "pattern": "^out\\.",
                    "replacement": "out1."
                },
                {
                    "name": "Readshort",
                    "pattern": "Readshort",
                    "replacement": "ReadShort"
                },
                {
                    "name": ".to",
                    "pattern": "\\.to",
                    "replacement": ".To"
                },
                {
                    "name": "/**/",
                    "pattern": "/\\*\\*/"
                },
                {
                    "name": "override ToString()",
                    "pattern": "public String ToString\\(\\)",
                    "replacement": "public override String ToString()"
                },
                {
                    "name": "override Equals()",
                    "pattern": "public bool Equals\\(",
                    "replacement": "public override bool Equals("
                },
                {
                    "name": "override hashCode()",
                    "pattern": "public int hashCode\\(\\)",
                    "replacement": "public override int GetHashCode()"
                },
                {
                    "name": "isEmpty()",
                    "pattern": "isEmpty\\(\\)",
                    "replacement": "IsEmpty"
                },
                {
                    "name": " test",
                    "pattern": "\\stest",
                    "replacement": " Test"
                },
                {
                    "name": ": TestCase",
                    "pattern": "\\:\\sTestCase"
                },
                {
                    "name": "fail(",
                    "pattern": "fail\\(",
                    "replacement": "Assert.Fail("
                },
                {
                    "name": "assertNull",
                    "pattern": "assertNull",
                    "replacement": "Assert.IsNull"
                },
                {
                    "name": ".revert",
                    "pattern": "\\.revert",
                    "replacement": "\\.Revert"
                },
                {
                    "name": ".endsWith",
                    "pattern": "\\.endsWith",
                    "replacement": "\\.EndsWith"
                },
                {
                    "name": ".hslf",
                    "pattern": "\\.hslf",
                    "replacement": ".HSLF"
                },
                {
                    "name": ".xssf",
                    "pattern": "\\.xssf",
                    "replacement": ".XSSF"
                },
                {
                    "name": ".model",
                    "pattern": "\\.model",
                    "replacement": ".Model"
                },
                {
                    "name": ".poifs",
                    "pattern": "\\.poifs",
                    "replacement": ".POIFS"
                },
                {
                    "name": ".usermodel",
                    "pattern": "\\.usermodel",
                    "replacement": ".UserModel"
                },
                {
                    "name": ".filesystem",
                    "pattern": "\\.filesystem",
                    "replacement": ".FileSystem"
                },
                {
                    "name": "File",
                    "pattern": "File\\s",
                    "replacement": "FileInfo "
                },
                {
                    "name": "Path",
                    "pattern": "Path\\s",
                    "replacement": "DirectoryInfo "
                },
                {
                    "name": "Paths.Get",
                    "pattern": "Paths.Get",
                    "replacement": "new DirectoryInfo"
                },
                {
                    "name": ".GetPath",
                    "pattern": "\\.GetPath\\(\\)",
                    "replacement": ".FullName"
                },
                {
                    "name": "org.apache.poi.",
                    "pattern": "org\\.apache\\.poi\\.",
                    "replacement": "NPOI."
                },
                {
                    "name": ".hslf",
                    "pattern": "\\.hslf",
                    "replacement": ".HSLF"
                },
                {
                    "name": "position",
                    "pattern": "\\.position",
                    "replacement": ".Position"
                }
            ]
        }
    }
}